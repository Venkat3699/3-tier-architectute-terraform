name: 'Terraform CICD pipeline'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: terraform-runner
    environment: Dev

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: 'Configure AWS credentials'
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: 'ap-south-1'

    - name: 'Verify AWS Credentials'
      run: aws sts get-caller-identity

    - name: 'Set up Terraform'
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: '1.11.3'

    - name: Terraform Init
      working-directory: dev
      run: terraform init

    - name: Terraform format
      working-directory: dev
      run: terraform fmt

    - name: Terraform validate
      working-directory: dev
      run: terraform validate

    - name: 'Install tfsec'
      run: |
        curl -sLo tfsec https://github.com/aquasecurity/tfsec/releases/download/v1.28.1/tfsec-linux-amd64
        chmod +x tfsec
        sudo mv tfsec /usr/local/bin/
        tfsec --version

    - name: 'Run tfsec and Save Output'
      working-directory: dev
      run: |
        tfsec . --format text | tee tfsec-table.txt || true
        tfsec . --format json > tfsec.json || true

    - name: 'Terraform Plan'
      working-directory: dev
      run: |
        export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
        export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
        terraform plan -out=tfplan

    - name: Upload tfplan artifact
      uses: actions/upload-artifact@v4
      with:
        name: tfplan
        path: dev/tfplan

  terraform-apply:
    name: 'Terraform Apply'
    runs-on: terraform-runner
    needs: terraform
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: 'Configure AWS credentials'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'ap-south-1'

      - name: 'Verify AWS Credentials'
        run: aws sts get-caller-identity

      - name: 'Set up Terraform'
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.11.3'

      - name: Download tfplan artifact
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: dev

      - name: 'Terraform Apply'
        working-directory: dev
        run: terraform apply -auto-approve tfplan


  terraform-destroy:
    name: 'Terraform Destroy'
    runs-on: terraform-runner
    needs: terraform-apply
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: 'Configure AWS credentials'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'ap-south-1'

      - name: 'Verify AWS Credentials'
        run: aws sts get-caller-identity

      - name: 'Terraform Destroy'
        working-directory: dev
        run: terraform destroy -auto-approve